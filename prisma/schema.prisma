// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["strictUndefinedChecks"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sessions    Session[]
}

/**
 * Sessions are used to keep track of user's login status
 * and to revoke access to the application. This approach
 * may require periodic cleanup of expired sessions as it
 * may lead to a large number of records in the database.
 */
model Session {
  id          String    @id @default(uuid())
  userId      String
  token       String    @unique
  expiresAt   DateTime
  revoked     Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Publication {
  id          String   @id @default(uuid())
  title       String
  abstract    String
  keywords    String[]
  mainAuthor  String
  coAuthors   String[]
  link        String?
  publisher   String?
  published   Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Project {
  id          String   @id @default(uuid())
  title       String
  description String
  year        Int
  type        String   @default("personal")
  tech        String[]
  isFeatured  Boolean  @default(false)
  githubLink  String?
  previewLink String?
  imageLink   String? // optional image url (can be null)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}